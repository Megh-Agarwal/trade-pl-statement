setInputDate("#tradeDate");var coinsList=[],coinsSymbols=[];let trades=[],boughtInTypes=(localStorage.trades&&(trades=JSON.parse(localStorage.trades)),["usd","btc","eth"]);function updateCoinWiseTrades(t,e,r,a){let o=0,i=0,n=0,l=0;for(let e=0;e<t.length;e++){var d=JSON.parse(t[e]);d.symbol==r&&(l++,"buy"==d.type&&(i+=parseFloat(d.volume),o+=parseFloat(d.cost)),"sell"==d.type&&(n+=parseFloat(d.volume)))}var s=o/i;a.price=s,a.volume=i-n,a.cost=s*(i-n);let c={};(c=localStorage[e]?JSON.parse(localStorage[e]):c)[r]||(c[r]={}),0==l?delete c[r]:c[r]=JSON.stringify(a),localStorage.setItem(e,JSON.stringify(c))}$.ajax({type:"GET",url:"https://api.coincap.io/v2/assets?limit=2000",success:function(t){for(let e=0;e<t.data.length;e++)coinsList.push(t.data[e].name+" - "+t.data[e].symbol),coinsSymbols[t.data[e].symbol]=t.data[e];$("#investedCoin").typeahead({hint:!0,highlight:!0,minLength:1,name:"coins",source:coinsList})}});for(let t=0;t<trades.length;t++){let e=JSON.parse(trades[t]);"show"==e.display&&$("#tradeDetailsTableBody").append(`     
                <tr>
                    <td>${e.coin}</td>
                    <td>${capitalizeFirstLetter(e.type)}</td>
                    <td>$${e.price}</td>
                    <td>${e.volume} ${e.symbol}</td>
                    <td>$${e.cost}</td>
                    <td>${new Date(e.tradeDate).toLocaleDateString()}</td>
                    <td>
                        <div class="d-grid gap-2 d-md-block">
                            <button 
                                type="button" 
                                class="btn btn-sm btn-outline-primary" 
                                onclick='editTradeOpenModal("${e.id}")'
                            >
                                <span class="icon icon-edit"></span>
                            </button>
                            <button 
                                type="button" 
                                class="btn btn-sm btn-outline-danger" 
                                onclick='deleteTradeOpenModal("${e.id}")'
                            >
                                <span class="icon icon-cross"></span>
                            </button>
                        </div>
                    </td>
                </tr>
            `)}function editTradeOpenModal(t){for(let e=0;e<trades.length;e++){var r=JSON.parse(trades[e]);if(r.id==t){$("#editInvestedCoin").val(r.coin),$("#editTradeType").val(r.type),$("#editVolume").val(r.volume),$("#editTradeDate").val(r.tradeDate),$("#tradeId").val(t),$("#editTradeModal").modal("show"),"usd"!=r.boughtIn?($("#editBoughtIn").val(r.boughtIn),$("#editPrice").val(r.boughtInPrice),$("#editExchangeRate").val(r.exchangeRate)):$("#editPrice").val(r.price),$("#editBoughtIn").trigger("change");break}}}function deleteTradeOpenModal(t){for(let e=0;e<trades.length;e++)if(JSON.parse(trades[e]).id==t){$("#deleteTradeSpanId").text(t),$("#deleteTradeModal").modal("show");break}}$("#boughtIn").on("change",function(e){var t=$("#boughtIn").val();"btc"!=t&&"eth"!=t||($("#fetchPriceButton").removeAttr("hidden"),$("#boughtInSupplement").removeAttr("hidden"),"btc"==t?$(".boughtInCoinName").text("of bitcoin when the coin was bought/sold"):"eth"==t&&$(".boughtInCoinName").text("of ethereum when the coin was bought/sold")),"usd"==t&&($("#fetchPriceButton").attr("hidden",!0),$("#boughtInSupplement").attr("hidden",!0),$(".boughtInCoinName").text(""))}),$("#editBoughtIn").on("change",function(e){var t=$("#editBoughtIn").val();"btc"!=t&&"eth"!=t||($("#editFetchPriceButton").removeAttr("hidden"),$("#editBoughtInSupplement").removeAttr("hidden"),"btc"==t?$(".editBoughtInCoinName").text("of bitcoin when the coin was bought/sold"):"eth"==t&&$(".editBoughtInCoinName").text("of ethereum when the coin was bought/sold")),"usd"==t&&($("#editFetchPriceButton").attr("hidden",!0),$("#editBoughtInSupplement").attr("hidden",!0),$(".editBoughtInCoinName").text(""))}),$("#fetchPriceButton").on("click",function(e){var t=$("#boughtIn").val();let i="bitcoin";if("btc"==t||"eth"==t){"eth"==t&&(i="ethereum");let o=$("#tradeDate").val();$.ajax({type:"GET",url:`https://api.coincap.io/v2/assets/${i}/history?interval=d1`,success:function(e){var t,r=e.data;let a="";for(t in r)new Date(o).getTime()===new Date(formatDate(r[t].date).toString()).getTime()&&(a=parseFloat(r[t].priceUsd));return""==a?(PNotify.error({title:"An error occured",text:`Could not fetch price for trade date ${new Date(o).toLocaleDateString()}. Please enter the price manually.`}),!1):($("#price").val(a),PNotify.success({title:"Fetched price successfully",text:`Successfully fetched price for ${i} for trade date ${new Date(o).toLocaleDateString()}.`}),!0)}})}}),$("#editFetchPriceButton").on("click",function(e){var t=$("#editBoughtIn").val();let i="bitcoin";if("btc"==t||"eth"==t){"eth"==t&&(i="ethereum");let o=$("#editTradeDate").val();$.ajax({type:"GET",url:`https://api.coincap.io/v2/assets/${i}/history?interval=d1`,success:function(e){var t,r=e.data;let a="";for(t in r)new Date(o).getTime()===new Date(formatDate(r[t].date).toString()).getTime()&&(a=parseFloat(r[t].priceUsd));return""==a?(PNotify.error({title:"An error occured",text:`Could not fetch price for trade date ${new Date(o).toLocaleDateString()}. Please enter the price manually.`}),!1):($("#editPrice").val(a),PNotify.success({title:"Fetched price successfully",text:`Successfully fetched price for ${i} for trade date ${new Date(o).toLocaleDateString()}.`}),!0)}})}});var $rows=$("#tradeDetailsTableBody tr");$("#search").keyup(function(){var e=$.trim($(this).val()).replace(/ +/g," ").toLowerCase();$rows.show().filter(function(){return!~$(this).text().replace(/\s+/g," ").toLowerCase().indexOf(e)}).hide()}),$("#editTradeButton").on("click",function(e){let t=$("#editInvestedCoin").val();var r=$("#editTradeType").val();let a=$("#editPrice").val();var o=$("#editVolume").val(),i=$("#editTradeDate").val(),n=$("#editBoughtIn").val(),l=a,d=$("#editExchangeRate").val();let s=0;if(""==t)return PNotify.error({title:"An error occured",text:"Found invested coin value as empty. Please enter the invested coin."}),!1;if(""==a||!isNumber(a))return PNotify.error({title:"An error occured",text:"Found invalid pricing value. Please enter a valid price at which the volume was traded."}),!1;if(""==o||!isNumber(o))return PNotify.error({title:"An error occured",text:"Found invalid volume value. Please enter a valid invested volume (quantity)."}),!1;if(""==i)return PNotify.error({title:"An error occured",text:"Found invalid trade date value. Please select a valid trade date."}),!1;if(""==n)return PNotify.error({title:"An error occured",text:"Found invalid bought in value. Please select a valid bought in value."}),!1;if(!boughtInTypes.includes(n))return PNotify.error({title:"An error occured",text:`Found invalid bought in type ${n}. Please select a valid bought in type.`}),!1;let c=t.split("-");if(""==(c=c[c.length-1].trim()))return PNotify.error({title:"An error occured",text:"Found invalid coin name."}),!1;if(!isset(coinsSymbols,c))return PNotify.error({title:"An error occured",text:`Found no coin with symbol as ${c}.`}),!1;let u={};if(localStorage.coinWiseTrades&&(u=JSON.parse(localStorage.coinWiseTrades)),"sell"==r){if(!u[c])return PNotify.error({title:"An error occured",text:`You have no holding for coin with symbol as ${c} to sell ${o} ${c}.`}),!1;r=JSON.parse(u[c]),r=parseFloat(r.volume);if(r<o)return PNotify.error({title:"An error occured",text:`You have only ${r} ${c} to sell.`}),!1}if("usd"!=n){if(""==d||!isNumber(d))return PNotify.error({title:"An error occured",text:"Found invalid exchange rate value. Please enter a valid exchange rate at which the volume was traded."}),!1;s=o*d}for(let e=0;e<trades.length;e++){let r=JSON.parse(trades[e]);if(r.id==$("#tradeId").val()){if("none"!=r.relation&&"related"!=r.relation)for(let t=0;t<trades.length;t++){let e=JSON.parse(trades[t]);e.id==r.relation&&(e.boughtInPrice=l,e.exchangeRate=d,e.price=a,e.volume=s,e.tradeDate=i,e.cost=(a*s).toFixed(2),trades[t]=JSON.stringify(e),updateCoinWiseTrades(trades,"coinWiseTrades",e.symbol,{symbol:e.symbol,name:coinsSymbols[e.symbol].name}),a*=d)}r.boughtInPrice=l,r.exchangeRate=d,r.price=a,r.volume=o,r.tradeDate=i,r.cost=(a*o).toFixed(2)}trades[e]=JSON.stringify(r)}localStorage.setItem("trades",JSON.stringify(trades)),updateCoinWiseTrades(trades,"coinWiseTrades",c,{symbol:c,name:coinsSymbols[c].name}),PNotify.success({title:"Success",text:"The trade was successfully edited."}),setTimeout(function(){location.reload()},1e3)}),$("#addNewTradeButton").on("click",function(e){let t=$("#investedCoin").val();var r=$("#tradeType").val();let a=$("#price").val();var o=$("#volume").val(),i=$("#tradeDate").val(),n=$("#boughtIn").val(),l=a,d=$("#exchangeRate").val();let s={};if(""==t)return PNotify.error({title:"An error occured",text:"Found invested coin value as empty. Please enter the invested coin."}),!1;if(""==r||"buy"!=r&&"sell"!=r)return PNotify.error({title:"An error occured",text:"Found invalid trade type. Please select a trade type."}),!1;if(""==a||!isNumber(a))return PNotify.error({title:"An error occured",text:"Found invalid pricing value. Please enter a valid price at which the volume was traded."}),!1;if(""==o||!isNumber(o))return PNotify.error({title:"An error occured",text:"Found invalid volume value. Please enter a valid invested volume (quantity)."}),!1;if(""==i)return PNotify.error({title:"An error occured",text:"Found invalid trade date value. Please select a valid trade date."}),!1;if(""==n)return PNotify.error({title:"An error occured",text:"Found invalid bought in value. Please select a valid bought in value."}),!1;if(!boughtInTypes.includes(n))return PNotify.error({title:"An error occured",text:`Found invalid bought in type ${n}. Please select a valid bought in type.`}),!1;let c=t.split("-");if(""==(c=c[c.length-1].trim()))return PNotify.error({title:"An error occured",text:"Found invalid coin name."}),!1;if(!isset(coinsSymbols,c))return PNotify.error({title:"An error occured",text:`Found no coin with symbol as ${c}.`}),!1;let u={};if(localStorage.coinWiseTrades&&(u=JSON.parse(localStorage.coinWiseTrades)),"sell"==r){if(!u[c])return PNotify.error({title:"An error occured",text:`You have no holding for coin with symbol as ${c} to sell ${o} ${c}.`}),!1;var h=JSON.parse(u[c]),h=parseFloat(h.volume);if(h<o)return PNotify.error({title:"An error occured",text:`You have only ${h} ${c} to sell.`}),!1}if("usd"!=n){if(""==d||!isNumber(d))return PNotify.error({title:"An error occured",text:"Found invalid exchange rate value. Please enter a valid exchange rate at which the volume was traded."}),!1;h=o*d;let e="Bitcoin - BTC",t="BTC";"eth"==n&&(e="Ethereum - ETH",t="ETH"),s={id:generateId(),symbol:t,type:"sell",coin:e,price:a,volume:h,tradeDate:i,name:coinsSymbols[t].name,cost:(a*h).toFixed(2),boughtIn:n,exchangeRate:d,boughtInPrice:l,display:"hidden",relation:"related"},trades.push(JSON.stringify(s)),updateCoinWiseTrades(trades,"coinWiseTrades",t,{symbol:t,name:coinsSymbols[t].name}),a*=d}trades.push(JSON.stringify({id:generateId(),symbol:c,type:r,coin:t,price:a,volume:o,tradeDate:i,name:coinsSymbols[c].name,cost:(a*o).toFixed(2),boughtIn:n,exchangeRate:d,boughtInPrice:l,display:"show",relation:Object.keys(s).includes("id")?s.id:"none"})),localStorage.setItem("trades",JSON.stringify(trades)),updateCoinWiseTrades(trades,"coinWiseTrades",c,{symbol:c,name:coinsSymbols[c].name}),PNotify.success({title:"Success",text:"The trade was successfully added."}),setTimeout(function(){location.reload()},1e3)}),$("#deleteTradeButton").on("click",function(e){for(let e=0;e<trades.length;e++){var t=JSON.parse(trades[e]);if(t.id==$("#deleteTradeSpanId").text()){if("none"!=t.relation&&"related"!=t.relation)for(let e=0;e<trades.length;e++){var r=JSON.parse(trades[e]);if(r.id==t.relation){trades.splice(e,1),updateCoinWiseTrades(trades,"coinWiseTrades",r.symbol,{symbol:r.symbol,name:coinsSymbols[r.symbol].name});break}}trades.splice(e,1),updateCoinWiseTrades(trades,"coinWiseTrades",t.symbol,{symbol:t.symbol,name:coinsSymbols[t.symbol].name});break}}localStorage.setItem("trades",JSON.stringify(trades)),PNotify.success({title:"Success",text:"The trade was successfully deleted."}),setTimeout(function(){location.reload()},1e3)});