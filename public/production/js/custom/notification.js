function askNotificationPermission(){window.Notification&&"granted"===Notification.permission?PNotify.success({title:"Permissions Granted",text:"You have granted the permission to send notifications."}):window.Notification&&"denied"!==Notification.permission?Notification.requestPermission(function(i){"granted"===i?PNotify.success({title:"Permissions Granted",text:"You have granted the permission to send notifications."}):"Notification"in window?PNotify.error({title:"An error occured",text:"You have not allowed the app to send you notifications."}):PNotify.error({title:"An error occured",text:"Your browser does not support notifications."})}):"Notification"in window?PNotify.error({title:"An error occured",text:"You have not allowed the app to send you notifications."}):PNotify.error({title:"An error occured",text:"Your browser does not support notifications."})}setInputDate("#notificationExpiry");var coinsList=[],coinsSymbols=[],notificationTypesList=["price","gain","loss","total"],notificationOptionsList=["once","everytime"],notificationConditionsList=["more","less","equal"],notificationTypesMap={price:"Price",total:"Gain and Loss"},notificationOptionsMap={once:"Only Once",everytime:"Everytime"},notificationConditionsMap={more:"More than equal to x",less:"Less than equal to x",equal:"Equal to x"};let notifications=[],idLogsForNotifications=(localStorage.notifications&&(notifications=JSON.parse(localStorage.notifications)),"");idLogsForNotifications=(idLogsForNotifications=localStorage.idLogsForNotifications?localStorage.idLogsForNotifications:idLogsForNotifications).split(","),$.ajax({type:"GET",url:"https://api.coincap.io/v2/assets?limit=2000",async:!1,success:function(t){for(let i=0;i<t.data.length;i++)coinsList.push(t.data[i].name+" - "+t.data[i].symbol),coinsSymbols[t.data[i].symbol]=t.data[i];$("#notificationCoin").typeahead({hint:!0,highlight:!0,minLength:1,name:"coins",source:coinsList})}});for(let t=0;t<notifications.length;t++){let i=JSON.parse(notifications[t]);$("#notificationDetailsTableBody").append(`     
            <tr>
                <td>${i.combined}</td>
                <td>${notificationTypesMap[i.type]}</td>
                <td>${notificationOptionsMap[i.option]}</td>
                <td>${notificationConditionsMap[i.condition]}</td>
                <td>$${i.value}</td>
                <td>${new Date(i.expiry).toLocaleDateString()}</td>
                <td>
                    <div class="d-grid gap-2 d-md-block">
                        <button 
                            type="button" 
                            class="btn btn-sm btn-outline-primary" 
                            onclick='editNotificationOpenModal(${i.id})'
                        >
                            <span class="icon icon-edit"></span>
                        </button>
                        <button 
                            type="button" 
                            class="btn btn-sm btn-outline-danger" 
                            onclick='deleteNotificationOpenModal(${i.id})'
                        >
                            <span class="icon icon-cross"></span>
                        </button>    
                    </div>
                </td>
                <td>
                    <div class="form-check form-switch">
                        <input 
                            class="form-check-input" 
                            type="checkbox" 
                            id="logs_${i.id}" 
                            onchange="addNotificationToLogsList(${i.id})"
                            ${idLogsForNotifications.includes(i.id.toString())?"checked":""}
                        >
                        <label class="form-check-label" for="logs_${i.id}"></label>
                    </div>
                </td>
            </tr>
        `)}function addNotificationToLogsList(i){if(i=i.toString(),$("#logs_"+i).is(":checked")){if(idLogsForNotifications.includes(i))return!0;idLogsForNotifications.push(i)}else{if(!idLogsForNotifications.includes(i))return!0;i=idLogsForNotifications.indexOf(i);idLogsForNotifications.splice(i,1)}localStorage.setItem("idLogsForNotifications",idLogsForNotifications.join(",")),PNotify.success({title:"Success",text:"The notification logs were updated successfully."}),setTimeout(function(){location.reload()},1e3)}function editNotificationOpenModal(t){for(let i=0;i<notifications.length;i++){var o=JSON.parse(notifications[i]);o.id==t&&($("#editNotificationCoin").val(o.combined),$("#editNotificationType").val(o.type),$("#editNotificationOption").val(o.option),$("#editNotificationCondition").val(o.condition),$("#editNotificationExpiry").val(o.expiry),$("#editNotificationValue").val(o.value),$("#notificationId").val(t),$("#editNotificationCoin").typeahead({hint:!0,highlight:!0,minLength:1,name:"coins",source:coinsList}),$("#editNotificationModal").modal("show"))}}function deleteNotificationOpenModal(t){for(let i=0;i<notifications.length;i++)JSON.parse(notifications[i]).id==t&&($("#deleteNotificationSpanId").text(t),$("#deleteNotificationModal").modal("show"))}var $rows=$("#notificationDetailsTableBody tr");$("#search").keyup(function(){var i=$.trim($(this).val()).replace(/ +/g," ").toLowerCase();$rows.show().filter(function(){return!~$(this).text().replace(/\s+/g," ").toLowerCase().indexOf(i)}).hide()}),$("#editNotificationButton").on("click",function(i){let o=$("#editNotificationCoin").val();var n=$("#editNotificationType").val(),e=$("#editNotificationOption").val(),a=$("#editNotificationCondition").val(),c=$("#editNotificationExpiry").val(),s=$("#editNotificationValue").val();if(""==o)return PNotify.error({title:"An error occured",text:"Found coin for notification value as empty. Please enter the coin."}),!1;if(""==n||!notificationTypesList.includes(n))return PNotify.error({title:"An error occured",text:"Found invalid notification type. Please select a notification type."}),!1;if(""==e||!notificationOptionsList.includes(e))return PNotify.error({title:"An error occured",text:"Found invalid notification option. Please select a notification option."}),!1;if(""==a||!notificationConditionsList.includes(a))return PNotify.error({title:"An error occured",text:"Found invalid notification condition. Please select a notification condition."}),!1;if(""==c)return PNotify.error({title:"An error occured",text:"Found invalid notification expiry value. Please select a valid notification expiry date."}),!1;if(""==s||!isNumber(s))return PNotify.error({title:"An error occured",text:"Found invalid notification value. Please enter a valid notification value."}),!1;let r=o.split("-");if(""==(r=r[r.length-1].trim()))return PNotify.error({title:"An error occured",text:"Found invalid coin name."}),!1;if(!isset(coinsSymbols,r))return PNotify.error({title:"An error occured",text:`Found no coin with symbol as ${r}.`}),!1;for(let t=0;t<notifications.length;t++){let i=JSON.parse(notifications[t]);i.id==$("#notificationId").val()&&(i.name=coinsSymbols[r].name,i.coin=r,i.combined=o,i.type=n,i.option=e,i.condition=a,i.expiry=c,i.value=s,i.status=0),notifications[t]=JSON.stringify(i)}localStorage.setItem("notifications",JSON.stringify(notifications)),PNotify.success({title:"Success",text:"The notification was successfully edited."}),setTimeout(function(){location.reload()},1e3)}),$("#addNewNotificationButton").on("click",function(i){let t=$("#notificationCoin").val();var o=$("#notificationType").val(),n=$("#notificationOption").val(),e=$("#notificationCondition").val(),a=$("#notificationExpiry").val(),c=$("#notificationValue").val();if(""==t)return PNotify.error({title:"An error occured",text:"Found coin for notification value as empty. Please enter the coin."}),!1;if(""==o||!notificationTypesList.includes(o))return PNotify.error({title:"An error occured",text:"Found invalid notification type. Please select a notification type."}),!1;if(""==n||!notificationOptionsList.includes(n))return PNotify.error({title:"An error occured",text:"Found invalid notification option. Please select a notification option."}),!1;if(""==e||!notificationConditionsList.includes(e))return PNotify.error({title:"An error occured",text:"Found invalid notification condition. Please select a notification condition."}),!1;if(""==a)return PNotify.error({title:"An error occured",text:"Found invalid notification expiry value. Please select a valid notification expiry date."}),!1;if(""==c||!isNumber(c))return PNotify.error({title:"An error occured",text:"Found invalid notification value. Please enter a valid notification value."}),!1;let s=t.split("-");return""==(s=s[s.length-1].trim())?(PNotify.error({title:"An error occured",text:"Found invalid coin name."}),!1):isset(coinsSymbols,s)?(notifications.push(JSON.stringify({id:generateId(),name:coinsSymbols[s].name,combined:t,coin:s,type:o,option:n,condition:e,expiry:a,value:c,status:0})),localStorage.setItem("notifications",JSON.stringify(notifications)),PNotify.success({title:"Success",text:"The notification was successfully added."}),void setTimeout(function(){location.reload()},1e3)):(PNotify.error({title:"An error occured",text:`Found no coin with symbol as ${s}.`}),!1)}),$("#deleteNotificationButton").on("click",function(i){for(let i=0;i<notifications.length;i++)if(JSON.parse(notifications[i]).id==$("#deleteNotificationSpanId").text()){notifications.splice(i,1);break}localStorage.setItem("notifications",JSON.stringify(notifications)),PNotify.success({title:"Success",text:"The notification was successfully deleted."}),setTimeout(function(){location.reload()},1e3)});